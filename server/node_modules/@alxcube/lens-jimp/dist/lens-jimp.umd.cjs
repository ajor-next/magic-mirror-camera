/*! @alxcube/lens-jimp 3.0.0
Â© 2020-2023 Alexander Alexandrov <alxcube@gmail.com>
License: Apache-2.0 */
(function(r,n){typeof exports=="object"&&typeof module<"u"?n(exports,require("@alxcube/lens"),require("jimp")):typeof define=="function"&&define.amd?define(["exports","@alxcube/lens","jimp"],n):(r=typeof globalThis<"u"?globalThis:r||self,n(r.lensJimp={},r.lens,r.Jimp))})(this,function(r,n,o){"use strict";class s extends n.AbstractImageAdapter{static createFromFile(e){return o.read(e).then(t=>new s(t))}constructor(e){super(e.bitmap.width,e.bitmap.height),this.image=e}getPixelColor(e,t){const{r:i,g:c,b:l,a:u}=o.intToRGBA(this.image.getPixelColor(e,t));return[i,c,l,u]}setPixelColor(e,t,i){this.image.setPixelColor(o.rgbaToInt(i[0],i[1],i[2],i[3]),e,t)}getAverageColor(){const e=this.image.clone().resize(1,1);return Array.prototype.slice.call(e.bitmap.data)}resize(e,t){const i=this.image.clone().resize(e,t);return new s(i)}prepareBlank(e,t){return new s(new o(e,t,0))}getResource(){return this.image}commit(){}}class a{match(e){return e instanceof o}create(e){return new s(e)}}n.serviceContainer.resolve("ImageAdapterFactoriesPool").add("jimp",new a),r.Adapter=s,Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=lens-jimp.umd.cjs.map
