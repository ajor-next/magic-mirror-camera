/*! @alxcube/lens-jimp 3.0.0
Â© 2020-2023 Alexander Alexandrov <alxcube@gmail.com>
License: Apache-2.0 */
import { AbstractImageAdapter as c, serviceContainer as m } from "@alxcube/lens";
import i from "jimp";
class o extends c {
  /**
   * Creates instance from image file path
   *
   * @param path Image file path
   */
  static createFromFile(e) {
    return i.read(e).then((t) => new o(t));
  }
  /**
   * @param image Jimp image resource object
   */
  constructor(e) {
    super(e.bitmap.width, e.bitmap.height), this.image = e;
  }
  /**
   * @inheritDoc
   */
  getPixelColor(e, t) {
    const { r, g: a, b: n, a: s } = i.intToRGBA(this.image.getPixelColor(e, t));
    return [r, a, n, s];
  }
  /**
   * @inheritDoc
   */
  setPixelColor(e, t, r) {
    this.image.setPixelColor(
      i.rgbaToInt(r[0], r[1], r[2], r[3]),
      e,
      t
    );
  }
  /**
   * @inheritDoc
   */
  getAverageColor() {
    const e = this.image.clone().resize(1, 1);
    return Array.prototype.slice.call(e.bitmap.data);
  }
  /**
   * @inheritDoc
   */
  resize(e, t) {
    const r = this.image.clone().resize(e, t);
    return new o(r);
  }
  /**
   * @inheritDoc
   */
  prepareBlank(e, t) {
    return new o(new i(e, t, 0));
  }
  /**
   * @inheritDoc
   */
  getResource() {
    return this.image;
  }
  /**
   * @inheritDoc
   */
  commit() {
  }
}
class l {
  /**
   * @inheritDoc
   */
  match(e) {
    return e instanceof i;
  }
  /**
   * @inheritDoc
   */
  create(e) {
    return new o(e);
  }
}
const p = m.resolve("ImageAdapterFactoriesPool");
p.add("jimp", new l());
export {
  o as Adapter
};
//# sourceMappingURL=lens-jimp.js.map
