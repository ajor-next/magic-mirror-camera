import type { ColorInterpolator } from "../color-interpolator";
import type { HasBackgroundColor, PixelAccessor } from "../pixel-accessor";
import type { Color } from "../types";
import type { ColorResampler } from "./ColorResampler";
import type { ReversePixelMapper } from "../pixel-mapper";
/**
 * Simple ColorResampler implementation without resampling, using interpolation only.
 * It uses pixel color interpolation and works much faster than EllipticalWeightedAverage but produces aliasing
 * effects.
 * It is good for quick creation of distortion previews and also used for ReversePixelMapper implementations
 * that doesn't have partial derivatives.
 * It works most quickly when ImageAdapter.interpolationMethod is set to InterpolationMethod.INTEGER.
 */
export declare class PointResampler implements ColorResampler {
    /**
     * Image being resampled.
     */
    private readonly image;
    /**
     * Distortion mapper.
     */
    private readonly pixelMapper;
    /**
     * Matte color for invalid mappings.
     */
    private readonly matteColor;
    /**
     * Output image scaling factor.
     */
    private scaling;
    /**
     * Color interpolator.
     * @private
     */
    private readonly interpolator;
    /**
     * PointResampler constructor.
     *
     * @param image
     * @param pixelMapper
     * @param interpolator
     * @param matteColor
     */
    constructor(image: PixelAccessor & HasBackgroundColor, pixelMapper: ReversePixelMapper, interpolator: ColorInterpolator, matteColor?: Color);
    /**
     * @inheritDoc
     */
    getScaling(): number;
    /**
     * @inheritDoc
     */
    setScaling(scaling: number): this;
    /**
     * @inheritDoc
     */
    getResampledColor(x: number, y: number): Color;
}
