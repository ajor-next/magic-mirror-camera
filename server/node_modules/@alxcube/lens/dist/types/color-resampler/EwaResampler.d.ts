import type { ColorInterpolator } from "../color-interpolator";
import { type HasAverageColor, type HasBackgroundColor, VirtualPixelMethod, type VirtualViewportPixelAccessor } from "../pixel-accessor";
import type { Color } from "../types";
import type { ReversePixelMapper } from "../pixel-mapper";
import type { EwaColorResampler } from "./EwaColorResampler";
/**
 * Elliptical Weighted Average color resampler.
 * Resamples pixel color using Elliptical Weighted Average technique.
 *
 * @see https://www.imagemagick.org/Usage/distorts/#distort_ewa EWA details at ImageMagick docs.
 * @see https://www2.eecs.berkeley.edu/Pubs/TechRpts/1989/CSD-89-516.pdf Fundamentals of Texture Mapping and Image Warping by Paul S. Heckbert
 * page 41, section 3.4, 3.5
 * @see https://imagemagick.org/api/MagickCore/resample_8c_source.html#l01038 ScaleResampleFilter() at
 * ImageMagick source.
 * @see https://imagemagick.org/api/MagickCore/resample_8c_source.html#l00315 ResamplePixelColor() at
 * ImageMagick source.
 */
export declare class EwaResampler implements EwaColorResampler {
    /**
     * Distortion mapper.
     */
    private pixelMapper;
    /**
     * Squared practical working support of the filter.
     */
    private readonly supportSq;
    /**
     * Matte color for invalid mappings.
     */
    private readonly matteColor;
    /**
     * Lookup table of weights for filtered average in elliptical area.
     */
    private readonly weightLookupTable;
    /**
     * Image being resampled.
     */
    private readonly image;
    /**
     * Cached for direct access image virtual viewport.
     */
    private readonly imageViewport;
    /**
     * Cached image area.
     */
    private readonly imageArea;
    /**
     * Cached for direct access image virtual pixel method.
     */
    private readonly imageVirtualPixelMethod;
    /**
     * Cached image average color.
     */
    private imageAverageColor;
    /**
     * Ellipse equation A.
     */
    private A;
    /**
     * Ellipse equation B.
     */
    private B;
    /**
     * Ellipse equation C.
     */
    private C;
    /**
     * Ellipse equation F.
     */
    private F;
    /**
     * Ellipse bounding parallelogram limit by u-axis.
     */
    private uLimit;
    /**
     * Ellipse bounding parallelogram limit by v-axis.
     */
    private vLimit;
    /**
     * Ellipse bounding parallelogram width by u-axis.
     */
    private uWidth;
    /**
     * Ellipse bounding parallelogram slope.
     */
    private slope;
    /**
     * Used for distortions with constant partial derivatives to flag that ellipse already has been set up.
     */
    private ellipseIsSetUp;
    /**
     * Flags that ellipse is too large, and it is impractical to resample color -- better use some of possible
     * optimizations.
     */
    private limitReached;
    /**
     * Output image scaling factor.
     */
    private scaling;
    /**
     * Image quantum range.
     */
    private readonly quantumRange;
    /**
     * Cached weight lookup table length.
     * @private
     */
    private readonly weightLookupTableSize;
    /**
     * Average color interpolator
     * @private
     */
    private readonly averageInterpolator;
    /**
     * Default color interpolator.
     * @private
     */
    private readonly defaultInterpolator;
    /**
     * EwaResampler constructor.
     *
     * @param image
     * @param pixelMapper
     * @param weightLookupTable
     * @param workingSupport
     * @param averageInterpolator
     * @param defaultInterpolator
     * @param matteColor
     * @param imageVirtualPixelMethod
     */
    constructor(image: VirtualViewportPixelAccessor & HasBackgroundColor & HasAverageColor, pixelMapper: ReversePixelMapper, weightLookupTable: number[], workingSupport: number, averageInterpolator: ColorInterpolator, defaultInterpolator: ColorInterpolator, matteColor: Color | undefined, imageVirtualPixelMethod: VirtualPixelMethod);
    /**
     * @inheritDoc
     */
    getWeightLookupTable(): number[];
    /**
     * @inheritDoc
     */
    getScaling(): number;
    /**
     * @inheritDoc
     */
    setScaling(scaling: number): this;
    /**
     * @inheritDoc
     */
    getResampledColor(x: number, y: number): Color;
    /**
     * Calculates ellipse for EWA resampling using partial derivatives.
     *
     * @param dux
     * @param duy
     * @param dvx
     * @param dvy
     */
    private setupEllipse;
    /**
     * Calculates ellipse equation for given distortion partial derivatives.
     *
     * @param dux
     * @param duy
     * @param dvx
     * @param dvy
     */
    private initEllipse;
    /**
     * Scales ellipse to match filter support.
     */
    private scaleEllipse;
    /**
     * Returns weighted average color at given point using scaled EWA ellipse.
     *
     * @param u0 Source image x-coordinate.
     * @param v0 Source image y-coordinate.
     */
    private getWeightedAverage;
    /**
     * Checks if no resampling is needed (if single pixel color should be returned).
     *
     * @param u Source image x-coordinate.
     * @param v Source image y-coordinate.
     */
    private doesntNeedResampling;
    /**
     * Lazily returns cached image average color.
     */
    private getImageAverageColor;
    /**
     * Checks if ellipse is completely out of image bounds.
     *
     * @private
     * @param u Source image x-coordinate.
     * @param v Source image y-coordinate.
     */
    private outOfImageBounds;
}
