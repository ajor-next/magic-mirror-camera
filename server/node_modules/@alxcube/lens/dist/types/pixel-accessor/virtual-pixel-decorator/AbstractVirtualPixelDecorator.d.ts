import type { Color } from "../../types";
import type { HasAverageColor } from "../HasAverageColor";
import type { HasBackgroundColor } from "../HasBackgroundColor";
import type { Viewport } from "../Viewport";
import type { VirtualViewportPixelAccessor } from "../VirtualViewportPixelAccessor";
import type { VirtualPixelDecorator } from "./VirtualPixelDecorator";
/**
 * Abstract virtual pixel decorator.
 */
export declare abstract class AbstractVirtualPixelDecorator<DecoratedType extends VirtualViewportPixelAccessor & HasAverageColor & HasBackgroundColor> implements VirtualPixelDecorator<DecoratedType> {
    protected readonly decorated: DecoratedType;
    /**
     * @inheritDoc
     */
    readonly width: number;
    /**
     * @inheritDoc
     */
    readonly height: number;
    /**
     * Origin X offset in virtual viewport.
     * @protected
     */
    protected offsetX: number;
    /**
     * Origin Y offset in virtual viewport.
     * @protected
     */
    protected offsetY: number;
    /**
     * BaseVirtualPixelDecorator constructor.
     *
     * @param decorated
     */
    constructor(decorated: DecoratedType);
    /**
     * @inheritDoc
     */
    abstract getVirtualPixelColor(x: number, y: number): Color;
    /**
     * @inheritDoc
     */
    getPixelColor(x: number, y: number): Color;
    /**
     * @inheritDoc
     */
    setPixelColor(x: number, y: number, color: Color): void;
    /**
     * @inheritDoc
     */
    getQuantumRange(): number;
    /**
     * @inheritDoc
     */
    getViewport(): Viewport;
    /**
     * @inheritDoc
     */
    getAverageColor(): Color;
    /**
     * @inheritDoc
     */
    getBackgroundColor(): Color;
    /**
     * @inheritDoc
     */
    getDecorated(): DecoratedType;
}
