import type { TypesMap } from "./TypesMap";
/**
 * Service container interface.
 */
export interface ServiceContainer<M extends TypesMap = TypesMap> {
    /**
     * Registers service or service factory function.
     *
     * @param key
     * @param service
     */
    register<K extends keyof M>(key: K, service: M[K] | ((locator: ServiceContainer<M>) => M[K])): void;
    /**
     * Unregisters service.
     *
     * @param key
     */
    unregister<K extends keyof M>(key: K): void;
    /**
     * Resolves service by key.
     *
     * @param key
     */
    resolve<K extends keyof M>(key: K): M[K];
    /**
     * Creates backup snapshot of service bindings and puts it into stack.
     */
    backup(): void;
    /**
     * Restores previous backup from stack.
     */
    restore(): void;
    /**
     * Creates child service container.
     */
    createChild(): ServiceContainer<M>;
}
