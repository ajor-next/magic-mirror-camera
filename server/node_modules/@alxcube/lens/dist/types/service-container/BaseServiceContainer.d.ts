import type { ServiceContainer } from "./ServiceContainer";
import type { TypesMap } from "./TypesMap";
/**
 * Base ServiceContainer interface implementation.
 */
export declare class BaseServiceContainer<M extends TypesMap = TypesMap> implements ServiceContainer<M> {
    /**
     * Parent container.
     *
     * @protected
     */
    protected parent: BaseServiceContainer<M> | null;
    /**
     * Services storage.
     *
     * @protected
     */
    protected services: Map<keyof M, unknown>;
    /**
     * Backups storage.
     *
     * @private
     */
    private backups;
    /**
     * BaseServiceContainer constructor.
     */
    constructor();
    /**
     * @inheritDoc
     */
    register<K extends keyof M>(key: K, service: M[K] | ((locator: ServiceContainer<M>) => M[K])): void;
    /**
     * @inheritDoc
     */
    unregister<K extends keyof M>(key: K): void;
    /**
     * @inheritDoc
     */
    resolve<K extends keyof M>(key: K): M[K];
    /**
     * @inheritDoc
     */
    backup(): void;
    /**
     * @inheritDoc
     */
    restore(): void;
    /**
     * @inheritDoc
     */
    createChild(): BaseServiceContainer<M>;
}
