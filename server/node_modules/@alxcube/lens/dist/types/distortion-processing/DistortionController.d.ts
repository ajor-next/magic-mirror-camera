import { type ImageAdapter } from "../image-adapter";
import type { OutputViewportResolver } from "../output-viewport-strategy";
import type { ViewportLiteral } from "../pixel-accessor";
import type { ReversePixelMapper } from "../pixel-mapper";
import type { ColorResampler } from "../color-resampler";
import type { DistortionProcessorFactory, DistortionProcessorFactoryOptions } from "./DistortionProcessorFactory";
/**
 * DistortionController options.
 */
export interface DistortionControllerOptions extends DistortionProcessorFactoryOptions {
    /**
     * Destination image viewport option.
     * * When set to ViewportLiteral (or Viewport, which also implements ViewportLiteral) object, output image will
     *  have such viewport.
     * * When set to 'bestFit' string or boolean true, best-fit viewport will be used if possible.
     * * When set to false or omitted, source image viewport will be used.
     */
    viewport?: "bestFit" | boolean | ViewportLiteral;
}
/**
 * Distortion process controller.
 */
export declare class DistortionController {
    private outputViewportResolver;
    private distortionProcessorFactory;
    /**
     * DistortionController constructor.
     *
     * @param outputViewportResolver
     * @param distortionProcessorFactory
     */
    constructor(outputViewportResolver: OutputViewportResolver, distortionProcessorFactory: DistortionProcessorFactory);
    /**
     * Performs distortion of given image and returns distorted image.
     *
     * @param image
     * @param reversePixelMapper
     * @param resampler
     * @param options
     */
    distort<ResourceType>(image: ImageAdapter<ResourceType>, reversePixelMapper: ReversePixelMapper, resampler: ColorResampler, options?: DistortionControllerOptions): Promise<ImageAdapter<ResourceType>>;
    /**
     * Creates blank target image which will be filled by pixel colors in distortion processor.
     *
     * @param image
     * @param reversePixelMapper
     * @param viewport
     * @param outputScaling
     * @private
     */
    private createTargetImage;
}
