import type { ColorStringParser } from "../color-string-parser";
import { type VirtualPixelDecoratorApplicator } from "../pixel-accessor";
import type { DistortionController, DistortionControllerOptions } from "./DistortionController";
import type { ReversePixelMapperResolver, GetReversePixelMapperFactoryArgs, ReversePixelMapperFactoriesPoolKeyMap, ReversePixelMapper } from "../pixel-mapper";
import type { ImageAdapter, ImageAdapterResolver } from "../image-adapter";
import type { ColorResamplerResolver, ColorResamplerResolverOptions } from "../color-resampler";
import type { Color, Point } from "../types";
/**
 * Distortion service options.
 */
export type DistortionServiceOptions = DistortionControllerOptions & Omit<ColorResamplerResolverOptions, "matteColor"> & {
    /**
     * Matte color. Used for invalid pixel mappings, for which no real color can be calculated from source image.
     * @default [0, 0, 0, 0]
     */
    matteColor?: Color | string;
    /**
     * Image background color. May be used as virtual pixel color or interpolation color.
     *
     * @default [0, 0, 0, 0] (transparent).
     */
    imageBackgroundColor?: Color | string;
    /**
     * Source image viewport offset. May impact on pixel mapping calculation.
     */
    imageViewportOffset?: Point;
};
/**
 * Distortion result interface.
 */
export interface DistortionResult<ResourceType> {
    /**
     * Distorted image.
     */
    image: ImageAdapter<ResourceType>;
    /**
     * Reverse pixel mapper instance, used for distortion.
     */
    distortion: ReversePixelMapper;
    /**
     * Distortion process start timestamp.
     */
    startTimestamp: number;
    /**
     * Distortion process end timestamp.
     */
    endTimestamp: number;
    /**
     * Distortion process duration (ms)
     */
    duration: number;
    /**
     * Color weight lookup table used in EWA resampler.
     */
    weightLookupTable?: number[];
}
/**
 * Distortion service class.
 */
export declare class DistortionService {
    private readonly reversePixelMapperResolver;
    private readonly colorResamplerResolver;
    private readonly distortionController;
    private readonly imageAdapterResolver;
    private readonly colorStringParser;
    private readonly virtualPixelDecoratorApplicator;
    /**
     * DistortionService constructor.
     *
     * @param reversePixelMapperResolver
     * @param colorResamplerResolver
     * @param distortionController
     * @param imageAdapterResolver
     * @param colorStringParser
     * @param virtualPixelDecoratorApplicator
     */
    constructor(reversePixelMapperResolver: ReversePixelMapperResolver, colorResamplerResolver: ColorResamplerResolver, distortionController: DistortionController, imageAdapterResolver: ImageAdapterResolver, colorStringParser: ColorStringParser, virtualPixelDecoratorApplicator: VirtualPixelDecoratorApplicator);
    /**
     * Distorts image using distortion name and distortion arguments.
     *
     * @param image
     * @param distortion
     * @param args
     * @param options
     */
    distort<ResourceType, K extends keyof ReversePixelMapperFactoriesPoolKeyMap>(image: ResourceType | ImageAdapter<ResourceType>, distortion: K, args: GetReversePixelMapperFactoryArgs<K>, options?: DistortionServiceOptions): Promise<DistortionResult<ResourceType>>;
    /**
     * Distorts image using provided ReversePixelMapper.
     *
     * @param image
     * @param reversePixelMapper
     * @param options
     */
    distort<ResourceType>(image: ResourceType | ImageAdapter<ResourceType>, reversePixelMapper: ReversePixelMapper, options?: DistortionServiceOptions): Promise<DistortionResult<ResourceType>>;
    /**
     * Distorts image.
     *
     * @param image
     * @param distortionOrMapper
     * @param argsOrOptions
     * @param mayBeOptions
     */
    distort<ResourceType>(image: ResourceType | ImageAdapter<ResourceType>, distortionOrMapper: keyof ReversePixelMapperFactoriesPoolKeyMap | string | ReversePixelMapper, argsOrOptions: number[] | DistortionServiceOptions | undefined, mayBeOptions?: DistortionServiceOptions): Promise<DistortionResult<ResourceType>>;
    /**
     * Resolves source image adapter for distortion.
     *
     * @param image
     * @private
     */
    private resolveImageAdapter;
    /**
     * Clarifies ambiguous arguments.
     *
     * @param image
     * @param distortionOrMapper
     * @param argsOrOptions
     * @param mayBeOptions
     * @private
     */
    private clarifyArguments;
    /**
     * Returns color resampler for image distortion.
     *
     * @param image
     * @param reversePixelMapper
     * @param options
     * @private
     */
    private getColorResampler;
    /**
     * Sets image adapter options from provided distortion options.
     *
     * @param image
     * @param options
     * @private
     */
    private setImageAdapterOptions;
    /**
     * Resolves color from color options.
     *
     * @param color
     * @param quantumRange
     * @param defaultValue
     * @private
     */
    private resolveColor;
}
