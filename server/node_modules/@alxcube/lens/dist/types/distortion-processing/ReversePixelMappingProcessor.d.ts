import type { ColorResampler } from "../color-resampler";
import type { ImageAdapter } from "../image-adapter";
import { type Deferred } from "../utils";
import type { DistortionProcessor } from "./DistortionProcessor";
/**
 * Reverse pixel mapping process scope.
 * @internal
 */
export interface ProcessScope<ResourceType> {
    /**
     * Deferred object which will be resolved when all image pixels are processed.
     */
    deferred: Deferred<void>;
    /**
     * Target image.
     */
    image: ImageAdapter<ResourceType>;
    /**
     * Color resampler.
     */
    resampler: ColorResampler;
    /**
     * Current X position, remembered between partial image pixels loops.
     */
    currentX: number;
    /**
     * Current Y position, remembered between partial image pixels loops.
     */
    currentY: number;
    /**
     * Start X position, remembered between partial image pixels loops.
     */
    startX: number;
    /**
     * End X position, remembered between partial image pixels loops.
     */
    endX: number;
    /**
     * End Y position, remembered between partial image pixels loops.
     */
    endY: number;
}
/**
 * Reverse Pixel Mapping processor.
 */
export declare class ReversePixelMappingProcessor implements DistortionProcessor {
    private asyncTimeout;
    private abortSignal?;
    /**
     * ReversePixelMappingProcessor constructor.
     *
     * @param asyncTimeout Timeout for delaying further pixel processing.
     */
    constructor(asyncTimeout: number, abortSignal?: AbortSignal | undefined);
    /**
     * Processes reverse pixel mapping.
     *
     * @param targetImage
     * @param resampler
     */
    process<ResourceType>(targetImage: ImageAdapter<ResourceType>, resampler: ColorResampler): Promise<ImageAdapter<ResourceType>>;
    /**
     * Creates scope for particular image processing.
     *
     * @param image
     * @param resampler
     * @private
     */
    private createProcessScope;
    /**
     * Processes copying of resampled colors of source image to target image.
     *
     * @param scope
     * @param asyncTimeout
     * @private
     */
    private doProcess;
}
