import type { Pool, PoolKeyMap } from "./Pool";
/**
 * Base Pool interface implementation.
 */
export declare class BasePool<T = unknown, M extends PoolKeyMap<T> = PoolKeyMap<T>> implements Pool<T, M> {
    /**
     * Pool items storage.
     * @private
     */
    private readonly storage;
    /**
     * BasePool constructor.
     */
    constructor();
    /**
     * @inheritDoc
     */
    has(key: keyof M | string): boolean;
    /**
     * @inheritDoc
     */
    get<K extends keyof M | string>(key: K): K extends keyof M ? M[K] : T;
    /**
     * @inheritDoc
     */
    add<K extends keyof M | string>(key: K, item: K extends keyof M ? M[K] : T, replace?: boolean): void;
    /**
     * @inheritDoc
     */
    remove(key: keyof M | string): void;
    /**
     * @inheritDoc
     */
    keys(): (keyof M | string)[];
    /**
     * @inheritDoc
     */
    items(): T[];
}
