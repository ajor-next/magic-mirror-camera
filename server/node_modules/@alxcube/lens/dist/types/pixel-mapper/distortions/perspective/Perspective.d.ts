import { Viewport } from "../../../pixel-accessor";
import type { Point } from "../../../types";
import type { EwaReversePixelMapper, PartialDerivatives } from "../../EwaReversePixelMapper";
import type { BestFitReversePixelMapper } from "../../BestFitReversePixelMapper";
import type { ForwardPixelMapper } from "../../ForwardPixelMapper";
/**
 * Perspective matrix:
 * [ sx, ry, tx,
 *   rx, sy, ty,
 *   px, py, 1 ].
 */
export type PerspectiveMatrix = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number
];
/**
 * Returns inverted perspective matrix.
 *
 * @param matrix
 *
 * @see https://imagemagick.org/api/MagickCore/distort_8c_source.html#l00109 Inverting perspective matrix at ImageMagick source
 */
export declare function invertPerspectiveMatrix(matrix: PerspectiveMatrix): PerspectiveMatrix;
/**
 * Project coordinates using perspective projection matrix.
 *
 * @param x
 * @param y
 * @param matrix
 */
export declare function applyPerspectiveMatrix(x: number, y: number, matrix: PerspectiveMatrix): [number, number];
/**
 * Perspective Distortion (a ratio of affine distortions).
 *
 * ```
 *     p(x,y)    c0*x + c1*y + c2
 * u = ------ = ------------------
 *     r(x,y)    c6*x + c7*y + 1
 *
 *     q(x,y)    c3*x + c4*y + c5
 * v = ------ = ------------------
 *      r(x,y)    c6*x + c7*y + 1
 * ```
 *
 * denominator = Sign of 'r', or the denominator affine, for the actual image.
 * This determines what part of the distorted image is 'ground' side of the horizon, the other part is 'sky' or invalid.
 * Valid values are  +1.0  or  -1.0  only.
 *
 *
 * @see https://www.imagemagick.org/Usage/distorts/#perspective Perspective distortion details at ImageMagick docs
 * @see https://imagemagick.org/api/MagickCore/distort_8c_source.html#l02450 Perspective distortion at ImageMagick source
 */
export declare class Perspective implements EwaReversePixelMapper, BestFitReversePixelMapper, ForwardPixelMapper {
    /**
     * Reverse matrix.
     */
    readonly matrix: PerspectiveMatrix;
    /**
     * Denominator for mapping validity calculation.
     */
    readonly denominator: number;
    /**
     * Forward matrix.
     */
    readonly forwardMatrix: PerspectiveMatrix;
    /**
     * @inheritDoc
     */
    readonly isConstantPartialDerivatives = false;
    /**
     * Cached Math.abs(matrix[6])
     * @private
     */
    private absC6;
    /**
     * Cached Math.abs(matrix[7])
     * @private
     */
    private absC7;
    /**
     * Perspective constructor.
     *
     * @param reverseMatrix Perspective projection matrix for reverse pixel mapping.
     * @param denominator Sign of 'r', or the denominator affine, for the actual image.
     * This determines what part of the distorted image is 'ground' side of the horizon, the other part is 'sky' or invalid.
     * Valid values are  +1.0  or  -1.0  only.
     */
    constructor(reverseMatrix: PerspectiveMatrix, denominator: number);
    /**
     * Creates Perspective instance using perspective matrix.
     *
     * @param matrix Perspective matrix.
     *
     * @see https://imagemagick.org/api/MagickCore/distort_8c_source.html#l00853 Generating inverted perspective
     * distortion matrix from forward perspective matrix at ImageMagick docs
     */
    static fromForwardMatrix(matrix: PerspectiveMatrix): Perspective;
    /**
     * @inheritDoc
     */
    reverseMap(x: number, y: number): Point;
    /**
     * @inheritDoc
     */
    getValidity(x: number, y: number, scaling: number): number;
    /**
     * @inheritDoc
     */
    getPartialDerivatives(x: number, y: number): PartialDerivatives;
    /**
     * @inheritDoc
     */
    forwardMap(u: number, v: number): Point;
    /**
     * @inheritDoc
     */
    getBestFitViewport(viewport: Viewport): Viewport;
}
