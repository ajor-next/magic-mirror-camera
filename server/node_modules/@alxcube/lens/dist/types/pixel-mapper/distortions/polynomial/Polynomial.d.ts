import type { Point } from "../../../types";
import type { EwaReversePixelMapper, PartialDerivatives } from "../../EwaReversePixelMapper";
import type { ReversePixelMapper } from "../../ReversePixelMapper";
import type { ReversePixelMapperFactory } from "../../ReversePixelMapperFactory";
/**
 * Polynomial Distortion
 *
 * First two coefficients are used to hole global polynomial information
 *  c0 = Order of the polynomial being created
 *  c1 = number_of_terms in one polynomial equation
 *
 * Rest of the coefficients map to the equations....
 *    v = c0 + c1*x + c2*y + c3*x*y + c4*x^2 + c5*y^2 + c6*x^3 + ...
 * for each control point.
 * As such total coefficients =  2 + number_terms * 2
 *
 * Polynomial Distortion Notes:
 * + Order 1.5 is fudged to map into a bilinear distortion.
 *   though it is not the same order as that distortion.
 *
 * @see https://imagemagick.org/api/MagickCore/distort_8c_source.html#l02631
 */
export declare class Polynomial implements ReversePixelMapper, EwaReversePixelMapper {
    readonly coeffs: number[];
    /**
     * @inheritDoc
     */
    isConstantPartialDerivatives: boolean;
    /**
     * Polynomial constructor.
     *
     * @param coeffs
     */
    constructor(coeffs: number[]);
    /**
     * @inheritDoc
     */
    reverseMap(x: number, y: number): Point;
    /**
     * @inheritDoc
     */
    getValidity(): 1;
    /**
     * @inheritDoc
     */
    getPartialDerivatives(x: number, y: number): PartialDerivatives;
}
/**
 * Polynomial distortion factory.
 *
 * First input argument is polynomial order.
 * Rest input Arguments are sets of control points.
 * order [u,v, x,y] ...
 * @see https://imagemagick.org/api/MagickCore/distort_8c_source.html#l01094
 */
export declare class PolynomialFactory implements ReversePixelMapperFactory {
    create(args: number[]): Polynomial;
}
